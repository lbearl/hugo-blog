<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on Luke Bearl</title>
    <link>http://localhost:1313/categories/net/</link>
    <description>Recent content in Net on Luke Bearl</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XUnit Test Lifecycles</title>
      <link>http://localhost:1313/posts/xunit-test-lifecycles/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/xunit-test-lifecycles/</guid>
      <description>&lt;p&gt;You are unit testing right? I hope so. If you are you may have run into some scenarios where things are not working quite right. One issue I&amp;rsquo;ve personally run into is things which attempt to maintain state between tests (eww, I know). Unfortunately, while it is good practice to make sure all of the tests you are writing are completely independent from each other, sometimes shared state will creep in due to other factors (like using an in-memory database because Microsoft kills kittens&lt;a href=&#34;#footer&#34; &gt;*&lt;/a&gt; and didn&amp;rsquo;t make Entity Framework easy to mock out).&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Gentle Introduction to Onion Architecture in ASP.NET MVC - Part 2</title>
      <link>http://localhost:1313/posts/gentle-introduction-2/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gentle-introduction-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://lukebearl.com/2016/09/gentle-introduction-1/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;part 1&lt;/a&gt; of this series we discussed what an onion architecture application would look like and discussed the technologies that we can leverage in .Net 4 in order to make that work. In this section we&amp;rsquo;ll go over how the project is structured, including spending a bit of time looking at how the IoC container is configured. This being a simple application the configuration is significantly easier to understand than it can be in more complex applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Gentle Introduction to Onion Architecture in ASP.NET MVC â€“ Part 1</title>
      <link>http://localhost:1313/posts/gentle-introduction-1/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/gentle-introduction-1/</guid>
      <description>&lt;p&gt;Welcome to part one of a multi part series on Enterprise Application in .Net Core! In this series we&amp;rsquo;ll go over everything that is necessary to build a best in breed enterprise application with the &lt;a href=&#34;http://jeffreypalermo.com/blog/the-onion-architecture-part-1/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Onion Architecture&lt;/a&gt; at its core. The word enterprise is integral in describing the software being described as it is going to be software which is capable of being extended year after year in a clean fashion while allowing things to stay &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DRY&lt;/a&gt; and testable. We&amp;rsquo;ll cover the following:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
